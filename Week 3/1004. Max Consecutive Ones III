1004. Max Consecutive Ones III :
------------------------------------------------------
TimeComplexity: O(N^2)
------------------------------------------
Brute-Force Code:
# Example usage:
def max_consecutive_ones(nums, k):
    n = len(nums)
    max_ones = 0

    # Iterate through every possible starting point
    for i in range(n):
        flipped_zeros = 0
        current_ones = 0

        # Iterate through the array from the starting point
        for j in range(i, n):
            if nums[j] == 1:
                current_ones += 1  # Count consecutive 1's
            elif flipped_zeros < k:
                flipped_zeros += 1
                current_ones += 1  # Flip a 0 and count it as a 1
            else:
                break  # Stop when flipping more than k zeros

        # Update the maximum consecutive ones
        max_ones = max(max_ones, current_ones)

    return max_ones

# Example usage:
nums = [1,1,1,0,0,0,1,1,1,1,0]
k = 2
print("Maximum consecutive 1's:", max_consecutive_ones(nums, k))





Main -Code:
--------------------
TimeComplexity : O(n)
-------------------------------------------
Code: This is a variable sliciding window
---------------------------------------------
class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        l = 0
        temp = 0
        ans = 0
        n = len(nums)

        for r in range(n):
            if nums[r] == 0:
                temp+=1
            while (temp>k) :
                if nums[l] == 0:
                    temp -= 1
                l += 1
            ans = max(ans,r-l+1)
        return ans
        

