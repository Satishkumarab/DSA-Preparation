3. Longest Substring Without Repeating Characters :
---------------------------------------------------------------
Time-Complexity : O(N^2)
-----------------------------------
Brute-Force Code:
------------------------------------

s = "abcabcbb"

# Variable to store the maximum length of substring
max_ans = 0

# Iterate through each starting position in the string
for i in range(len(s)):
    set_a = set()  # Set to store unique characters in the current substring
    for j in range(i, len(s)):
        # If the character is not in the set, add it
        if s[j] not in set_a:
            set_a.add(s[j])
            # Calculate the length of the current substring
            ans = j - i + 1
            # Update the maximum length
            max_ans = max(ans, max_ans)
        else:
            # Stop the inner loop if a duplicate character is found
            break

print(max_ans)


TimeComplexity : O(n)
-------------------------------------------------------
Main - Code:
----------------------------------------------------------
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        set_a = set()
        l = 0
        ans = 0
        n = len(s)
        
        for r in range(n):
            ch = s[r]
            if ch not in set_a :
                set_a.add(s[r])
            else:
                while ch in set_a :
                    set_a.remove(s[l])
                    l += 1
                set_a.add(ch)

            ans = max(ans,r-l+1)

        return ans


Another solution also imp:
----------------------------------------------------------------------------------------------------
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        set_a = set()
        l = 0
        ans = 0
        n = len(s)
        
        for r in range(n):
            while s[r] in set_a:
                set_a.remove(s[l])
                l += 1
            set_a.add(s[r])
            ans = max(ans, r - l + 1)
        
        return ans
        

